//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls/LayoutControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LayoutControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LayoutControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LayoutControls"",
    ""maps"": [
        {
            ""name"": ""Inventory"",
            ""id"": ""229576ad-29a1-42f6-a2a6-5f7d263f037a"",
            ""actions"": [
                {
                    ""name"": ""SwitchDisplay"",
                    ""type"": ""Button"",
                    ""id"": ""ff039720-cfe7-4822-b69b-c9292647ff5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01bfaff2-adbc-4813-b127-4e11969db6da"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69881bf8-5491-46c7-ace7-c875203c36af"",
                    ""path"": ""<HID::HORI CO.,LTD. HORIPAD S>/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c591f06e-6861-4880-9326-fdf2f3a99d24"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EscapeMenu"",
            ""id"": ""56bff35e-b111-4352-9262-003ed19b157d"",
            ""actions"": [
                {
                    ""name"": ""SwitchDisplay"",
                    ""type"": ""Button"",
                    ""id"": ""c5059342-5b5f-4d05-bd5c-4c0efc3cd461"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""880e0ccc-2360-4723-88ab-37e4504aa393"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdfbec68-5971-4b47-9e4c-ca669afaeb57"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa16732b-f080-4641-81a5-9dbb807e78a6"",
                    ""path"": ""<HID::HORI CO.,LTD. HORIPAD S>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDisplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_SwitchDisplay = m_Inventory.FindAction("SwitchDisplay", throwIfNotFound: true);
        // EscapeMenu
        m_EscapeMenu = asset.FindActionMap("EscapeMenu", throwIfNotFound: true);
        m_EscapeMenu_SwitchDisplay = m_EscapeMenu.FindAction("SwitchDisplay", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_SwitchDisplay;
    public struct InventoryActions
    {
        private @LayoutControls m_Wrapper;
        public InventoryActions(@LayoutControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchDisplay => m_Wrapper.m_Inventory_SwitchDisplay;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @SwitchDisplay.started += instance.OnSwitchDisplay;
            @SwitchDisplay.performed += instance.OnSwitchDisplay;
            @SwitchDisplay.canceled += instance.OnSwitchDisplay;
        }

        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @SwitchDisplay.started -= instance.OnSwitchDisplay;
            @SwitchDisplay.performed -= instance.OnSwitchDisplay;
            @SwitchDisplay.canceled -= instance.OnSwitchDisplay;
        }

        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // EscapeMenu
    private readonly InputActionMap m_EscapeMenu;
    private List<IEscapeMenuActions> m_EscapeMenuActionsCallbackInterfaces = new List<IEscapeMenuActions>();
    private readonly InputAction m_EscapeMenu_SwitchDisplay;
    public struct EscapeMenuActions
    {
        private @LayoutControls m_Wrapper;
        public EscapeMenuActions(@LayoutControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchDisplay => m_Wrapper.m_EscapeMenu_SwitchDisplay;
        public InputActionMap Get() { return m_Wrapper.m_EscapeMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EscapeMenuActions set) { return set.Get(); }
        public void AddCallbacks(IEscapeMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_EscapeMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EscapeMenuActionsCallbackInterfaces.Add(instance);
            @SwitchDisplay.started += instance.OnSwitchDisplay;
            @SwitchDisplay.performed += instance.OnSwitchDisplay;
            @SwitchDisplay.canceled += instance.OnSwitchDisplay;
        }

        private void UnregisterCallbacks(IEscapeMenuActions instance)
        {
            @SwitchDisplay.started -= instance.OnSwitchDisplay;
            @SwitchDisplay.performed -= instance.OnSwitchDisplay;
            @SwitchDisplay.canceled -= instance.OnSwitchDisplay;
        }

        public void RemoveCallbacks(IEscapeMenuActions instance)
        {
            if (m_Wrapper.m_EscapeMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEscapeMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_EscapeMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EscapeMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EscapeMenuActions @EscapeMenu => new EscapeMenuActions(this);
    public interface IInventoryActions
    {
        void OnSwitchDisplay(InputAction.CallbackContext context);
    }
    public interface IEscapeMenuActions
    {
        void OnSwitchDisplay(InputAction.CallbackContext context);
    }
}
